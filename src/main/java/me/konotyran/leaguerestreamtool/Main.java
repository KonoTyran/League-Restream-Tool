/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.konotyran.leaguerestreamtool;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.FileWriter;
import java.util.List;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import me.konotyran.leaguerestreamtool.helpers.Channel;
import me.konotyran.leaguerestreamtool.helpers.Commentator;
import me.konotyran.leaguerestreamtool.helpers.Event;
import me.konotyran.leaguerestreamtool.helpers.Tracker;

/**
 *
 * @author HAklo
 */
public class Main extends javax.swing.JFrame {

    List<String[]> Matches = new ArrayList();

    ObjectMapper objectMapper = new ObjectMapper();
    
    ZoneId easternZone = ZoneId.of("US/Eastern");
    DateTimeFormatter dtfISO = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
    DateTimeFormatter dtfHuman = DateTimeFormatter.ofPattern("EEE MMM dd, hh:mm a zzz");
            
    /**
     * Creates new form main window
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonOpen = new javax.swing.JButton();
        buttonInv = new javax.swing.JButton();
        buttonSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        Status = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 17), new java.awt.Dimension(0, 17), new java.awt.Dimension(32767, 20));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("aLttPR Leauge Restream Tool");

        buttonOpen.setText("Open");
        buttonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenActionPerformed(evt);
            }
        });

        buttonInv.setText("Invitational");
        buttonInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInvActionPerformed(evt);
            }
        });

        buttonSubmit.setText("I Choose You!");
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });

        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Team 1", "Team 2", "Channel", "Comms", "Tracker", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scheduleTable.setToolTipText("");
        scheduleTable.setAlignmentY(0.0F);
        scheduleTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        scheduleTable.setRowHeight(35);
        scheduleTable.getColumnModel().getColumn(0).setPreferredWidth(160);
        scheduleTable.getColumnModel().getColumn(0).setMaxWidth(160);
        scheduleTable.getColumnModel().getColumn(0).setMinWidth(160);
        scheduleTable.getColumnModel().getColumn(1).setPreferredWidth(166);
        scheduleTable.getColumnModel().getColumn(1).setMaxWidth(166);
        scheduleTable.getColumnModel().getColumn(1).setMinWidth(166);
        scheduleTable.getColumnModel().getColumn(2).setPreferredWidth(166);
        scheduleTable.getColumnModel().getColumn(2).setMaxWidth(166);
        scheduleTable.getColumnModel().getColumn(2).setMinWidth(166);
        scheduleTable.getColumnModel().getColumn(3).setPreferredWidth(131);
        scheduleTable.getColumnModel().getColumn(3).setMaxWidth(131);
        scheduleTable.getColumnModel().getColumn(3).setMinWidth(131);
        scheduleTable.getColumnModel().getColumn(4).setPreferredWidth(190);
        scheduleTable.getColumnModel().getColumn(4).setMaxWidth(190);
        scheduleTable.getColumnModel().getColumn(4).setMinWidth(190);
        scheduleTable.getColumnModel().getColumn(5).setPreferredWidth(95);
        scheduleTable.getColumnModel().getColumn(5).setMaxWidth(95);
        scheduleTable.getColumnModel().getColumn(5).setMinWidth(95);
        scheduleTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scheduleTable.setShowHorizontalLines(true);
        scheduleTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(scheduleTable);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        Status.setToolTipText("");
        Status.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(Status)
            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1140, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonInv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSubmit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOpen)
                    .addComponent(buttonInv)
                    .addComponent(buttonSubmit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FetchSchedule(String event) {
        
        ZonedDateTime eastern = ZonedDateTime.now(easternZone);
        ZonedDateTime yesterday = eastern.minusDays(1);
        ZonedDateTime oneWeek = eastern.plusDays(2);
        
        HttpClient client = HttpClient.newHttpClient();
        
        HttpRequest request = HttpRequest.newBuilder(
                URI.create("http://speedgaming.org/api/schedule/?event="
                        + event
                        + "&from="
                        + dtfISO.format(yesterday)
                        + "&to="
                        + dtfISO.format(oneWeek)
                )
        ).header("accept", "application/json").build();
        
        client.sendAsync(request, BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenAccept(this::WriteSchedule);
        
    }
    
    private void WriteSchedule(String json) {

        DefaultTableModel dtm = (DefaultTableModel)scheduleTable.getModel();
        dtm.setRowCount(0);
        Matches.clear();
        try {
            
            Event[] events = objectMapper.readValue(json, Event[].class);
            
            int line = -1;
            for (Event event : events) {
                line++;
                
                ZonedDateTime matchTime = ZonedDateTime.parse(event.time).withZoneSameInstant(easternZone);
                String time = dtfHuman.format(matchTime);
                String team1 = "?";
                String team2 = "?";
                if (event.match.title.contains("_")) {
                    team1 = event.match.title.isBlank() ? "?" : event.match.title.split("_")[0];
                    team2 = event.match.title.isBlank() ? "?" : event.match.title.split("_")[1];
                }
                
                
                String[] playerleft = { "no player", "" };
                String[] playerright = { "no player", "" };
                playerleft[0] = event.match.players[0].displayName;
                playerright[0] = event.match.players[1].displayName;
                if (event.match.players.length == 4) {
                    playerleft[1] = event.match.players[2].displayName;
                    playerright[1] = event.match.players[3].displayName;
                }
                
                String channel = "?";
                for (Channel chan : event.channels) {
                    if (chan.language.equals("en"))
                        channel = chan.name;
                }
                
                String comms = "";
                List<String> approvedComms = new LinkedList<>();
                for (Commentator com : event.commentators) {
                    if (com.approved && com.language.equals("en"))
                        approvedComms.add(com.displayName);
                } 
                comms = String.join(", ", approvedComms);
                
                String trackers = "";
                List<String> approvedTrackers = new LinkedList<>();
                for (Tracker tracker : event.trackers) {
                    if (tracker.approved)
                        approvedTrackers.add(tracker.displayName);
                }
                trackers = String.join(", ", approvedTrackers);
                
                this.Matches.add(new String[] { 
                    time, 
                    team1, 
                    playerleft[0], 
                    playerleft[1], 
                    team2, 
                    playerright[0], 
                    playerright[1], 
                    channel, 
                    comms, 
                    trackers 
                }); //add to our internal variable so we dont have to re-parse events
                
                dtm.addRow((Object[])new String[] {
                    time,
                    "<html><p style='white-space: nowrap;overflow: hidden;text-overflow: ellipsis;'>"
                            + team1
                            + "</p><p style='white-space: nowrap;overflow: hidden;text-overflow: ellipsis;'>"
                            + playerleft[0]
                            + " "
                            + playerleft[1]
                            + "</p></html>",
                    "<html><p style='white-space: nowrap;overflow: hidden;text-overflow: ellipsis;'>"
                            + team2
                            + "</p><p style='white-space: nowrap;overflow: hidden;text-overflow: ellipsis;'>"
                            + playerright[0]
                            + " "
                            + playerright[1]
                            + "</p></html>",
                    channel,
                    comms,
                    trackers,
                    "<html>"
                            + event.match.note
                            + "<br>&nbsp;</html>" // yes its a bit hacky but it works.
                });
                
            }
        } catch (JsonProcessingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Status.setText("Finished");
    }
    
    
    private void buttonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenActionPerformed
        // TODO add your handling code here:
        Status.setText("Loading Open Schedule...");

        FetchSchedule("alttprleague");
    }//GEN-LAST:event_buttonOpenActionPerformed

    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
        // TODO add your handling code here:
        int row = scheduleTable.getSelectedRow();
        if(row == -1) {
            Status.setText("no row selected");
            return;
        }
        Status.setText("Writing Row " + row + " to files...");
        // Table.add(new String[]{time,teams[0],playerleft[0],playerleft[1],teams[1],playerright[0],playerright[1],channel,comms,tracker});
        String[] line = Matches.get(row);
        try {
            FileWriter time = new FileWriter("time.txt");
            time.write(line[0]); //write time line to file
            time.close();
            
            FileWriter lTeam = new FileWriter("left-team.txt");
            lTeam.write(line[1]); //write time line to file
            lTeam.close();
            
            FileWriter tlplayer = new FileWriter("top-left-player.txt");
            tlplayer.write(line[2]); //write time line to file
            tlplayer.close();
            
            FileWriter blplayer = new FileWriter("bottom-left-player.txt");
            blplayer.write(line[3]); //write time line to file
            blplayer.close();
            
            FileWriter rTeam = new FileWriter("right-team.txt");
            rTeam.write(line[4]); //write time line to file
            rTeam.close();
            
            FileWriter trplayer = new FileWriter("top-right-player.txt");
            trplayer.write(line[5]); //write time line to file
            trplayer.close();
            
            FileWriter brplayer = new FileWriter("bottom-right-player.txt");
            brplayer.write(line[6]); //write time line to file
            brplayer.close();
            
            FileWriter comms = new FileWriter("commentators.txt");
            comms.write(line[8]); //write time line to file
            comms.close();
            
        } catch (IOException ex) {
            Status.setText("Error Writing Files");
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonSubmitActionPerformed

    private void buttonInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInvActionPerformed
        // TODO add your handling code here:
        Status.setText("Loading Invitational Schedule...");
       
        FetchSchedule("invleague");
    }//GEN-LAST:event_buttonInvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main gui = new Main();
                gui.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Status;
    private javax.swing.JButton buttonInv;
    private javax.swing.JButton buttonOpen;
    private javax.swing.JButton buttonSubmit;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable scheduleTable;
    // End of variables declaration//GEN-END:variables
}
